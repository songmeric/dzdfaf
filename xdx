# ──────────────────────────────────────────────────────────────────────────────
# 1.  /apps/sp_hfts/latency_portal/latency_portal.py
# ──────────────────────────────────────────────────────────────────────────────
#!/usr/bin/env python3
"""
latency-portal  ◆  nano-latency visualiser
• Added: un-approve endpoint, ISO-date x-axes, tooltip-ready stats.
"""

import base64, io, json, logging, pathlib, sqlite3, statistics, datetime as dt
from typing import List, Tuple            # ← Tuple now imported
import pandas as pd
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
from fastapi import FastAPI, Request, HTTPException, Form
from fastapi.responses import HTMLResponse, RedirectResponse, PlainTextResponse
from fastapi.templating import Jinja2Templates

CSV_DIR = pathlib.Path("/apps/sp_hfts/latency_csv"); CSV_DIR.mkdir(parents=True, exist_ok=True)
BASE_DIR = pathlib.Path(__file__).parent
LOG_FILE = BASE_DIR / "portal.log"
DB_PATH  = str(CSV_DIR / "runs.db")                     # ensure str
TPL_DIR  = BASE_DIR / "templates"

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s  %(levelname)-8s %(message)s",
                    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"),
                              logging.StreamHandler()])
log = logging.getLogger("latency-portal")

app       = FastAPI(title="Latency-Portal")
templates = Jinja2Templates(directory=str(TPL_DIR))

# ─── DB ───────────────────────────────────────────────────────────────────────
def _init_db() -> None:
    with sqlite3.connect(DB_PATH) as c:
        c.execute("""CREATE TABLE IF NOT EXISTS runs(
            id          TEXT PRIMARY KEY,
            filename    TEXT,
            created_at  TEXT,
            p50         REAL, p95 REAL, p99 REAL,
            stdev       REAL, count INTEGER,
            approved    INTEGER DEFAULT 0,
            approved_by TEXT, approved_at TEXT,
            png_b64     TEXT );""")
_init_db()

def _row_to_dict(row) -> dict:
    keys=("id","filename","created_at","p50","p95","p99","stdev","count",
          "approved","approved_by","approved_at","png_b64")
    return dict(zip(keys,row))

# ─── CSV ingestion (unchanged) ───────────────────────────────────────────────
def _ingest_new_files() -> None:
    with sqlite3.connect(DB_PATH) as c:
        known = {r[0] for r in c.execute("SELECT id FROM runs")}
    for csv_path in CSV_DIR.glob("*.csv"):
        run_id = csv_path.stem
        if run_id in known: continue
        try:
            df = pd.read_csv(csv_path, skipinitialspace=True,
                    names=["entry_id","ingress","egress","latency_ns"],
                    header=0, dtype={"ingress":"int64","latency_ns":"int64"},
                    engine="python")
        except Exception as exc:
            log.error("Failed to parse %s: %s", csv_path.name, exc); continue
        if df.empty: log.error("Empty CSV %s", csv_path.name); continue
        df.sort_values("ingress", inplace=True)
        lat = df["latency_ns"]
        p50,p95,p99 = (lat.quantile(q) for q in (0.5,0.95,0.99))
        stdev = statistics.pstdev(lat)
        fig, ax = plt.subplots(); ax.plot(df["ingress"], lat, linewidth=0.5)
        ax.set_xlabel("Ingress ns"); ax.set_ylabel("Latency ns"); ax.set_title(run_id)
        buf = io.BytesIO(); fig.savefig(buf, format="png", dpi=110, bbox_inches="tight")
        plt.close(fig); png_b64 = base64.b64encode(buf.getvalue()).decode()
        with sqlite3.connect(DB_PATH) as c:
            c.execute("INSERT INTO runs VALUES (?,?,?,?,?,?,?,?,?,?,?,?)",
                      (run_id, csv_path.name, dt.datetime.utcnow().isoformat(),
                       p50,p95,p99,stdev,len(lat),0,None,None,png_b64))
        log.info("Ingested %s", csv_path.name)

@app.middleware("http")
async def auto_ingest(request: Request, call_next):
    _ingest_new_files(); return await call_next(request)

# ─── Helpers ─────────────────────────────────────────────────────────────────
def _per_second_quantiles(df) -> Tuple[List[str], List[float], List[float], List[float]]:
    df["sec"] = (df["ingress"] // 1_000_000_000)
    grouped   = df.groupby("sec")["latency_ns"]
    p50 = grouped.quantile(0.50); p95 = grouped.quantile(0.95); p99 = grouped.quantile(0.99)
    idx_iso = pd.to_datetime(p50.index.astype("int64"), unit="s", utc=True)\
                 .strftime("%Y-%m-%dT%H:%M:%SZ").tolist()
    return idx_iso, p50.tolist(), p95.tolist(), p99.tolist()

# ─── Routes ──────────────────────────────────────────────────────────────────
@app.get("/", response_class=HTMLResponse)
def list_runs(request: Request):
    with sqlite3.connect(DB_PATH) as c:
        rows=c.execute("SELECT * FROM runs ORDER BY created_at DESC").fetchall()
    return templates.TemplateResponse("list.html", {"request":request,"runs":[_row_to_dict(r) for r in rows]})

@app.get("/approved", response_class=HTMLResponse)
def approved(request: Request):
    with sqlite3.connect(DB_PATH) as c:
        rows=c.execute("SELECT * FROM runs WHERE approved=1 ORDER BY created_at DESC").fetchall()
    return templates.TemplateResponse("list.html", {"request":request,"runs":[_row_to_dict(r) for r in rows]})

@app.get("/runs/latest")
def latest_redirect():
    with sqlite3.connect(DB_PATH) as c:
        row=c.execute("SELECT id FROM runs ORDER BY created_at DESC LIMIT 1").fetchone()
    if not row: raise HTTPException(404,"No runs")
    return RedirectResponse(f"/runs/{row[0]}", status_code=303)

@app.get("/runs/{run_id}", response_class=HTMLResponse)
def show_run(request: Request, run_id:str):
    with sqlite3.connect(DB_PATH) as c:
        row=c.execute("SELECT * FROM runs WHERE id=?", (run_id,)).fetchone()
    if not row: raise HTTPException(404)
    d=_row_to_dict(row)
    csv_path=CSV_DIR/d["filename"]
    if not csv_path.exists(): raise HTTPException(500,"CSV missing")
    df=pd.read_csv(csv_path, skipinitialspace=True,
        names=["entry_id","ingress","egress","latency_ns"], header=0,
        dtype={"ingress":"int64","latency_ns":"int64"}, engine="python").sort_values("ingress")
    df["ingress_dt"]=pd.to_datetime(df["ingress"], unit="ns", utc=True)
    x_json=json.dumps(df["ingress_dt"].dt.strftime("%Y-%m-%dT%H:%M:%S.%fZ").tolist())
    y_json=json.dumps(df["latency_ns"].tolist())
    sec_iso,p50s,p95s,p99s=_per_second_quantiles(df)
    return templates.TemplateResponse("detail.html",
        {"request":request, **d,
         "x_json":x_json, "y_json":y_json,
         "sec_json":json.dumps(sec_iso),
         "p50_json":json.dumps(p50s),
         "p95_json":json.dumps(p95s),
         "p99_json":json.dumps(p99s)})

@app.post("/runs/{run_id}/approve")
def approve(run_id:str, user:str=Form("anon")):
    now=dt.datetime.utcnow().isoformat()
    with sqlite3.connect(DB_PATH) as c:
        changed=c.execute("UPDATE runs SET approved=1,approved_by=?,approved_at=? WHERE id=? AND approved=0",
                          (user,now,run_id)).rowcount
    if changed==0: raise HTTPException(409,"already approved or missing")
    return RedirectResponse(f"/runs/{run_id}", status_code=303)

@app.post("/runs/{run_id}/unapprove")
def unapprove(run_id:str):
    with sqlite3.connect(DB_PATH) as c:
        changed=c.execute("UPDATE runs SET approved=0,approved_by=NULL,approved_at=NULL WHERE id=? AND approved=1",
                          (run_id,)).rowcount
    if changed==0: raise HTTPException(409,"not approved or missing")
    return RedirectResponse(f"/runs/{run_id}", status_code=303)

@app.get("/runs/{run_id}/status")
def status(run_id:str):
    with sqlite3.connect(DB_PATH) as c:
        row=c.execute("SELECT approved FROM runs WHERE id=?", (run_id,)).fetchone()
    if not row: raise HTTPException(404)
    return {"run_id":run_id,"approved":bool(row[0])}

@app.get("/logs", response_class=PlainTextResponse)
def view_logs(lines:int=1000):
    try:
        with open(LOG_FILE,"r",encoding="utf-8") as f:
            return PlainTextResponse("".join(f.readlines()[-lines:]))
    except FileNotFoundError: raise HTTPException(404,"log missing")
# ──────────────────────────────────────────────────────────────────────────────



# ──────────────────────────────────────────────────────────────────────────────
# 2.  /apps/sp_hfts/latency_portal/templates/base.html
# ──────────────────────────────────────────────────────────────────────────────
<!DOCTYPE html><html>
<head>
  <meta charset="utf-8">
  <title>{% block title %}Latency Portal{% endblock %}</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css" rel="stylesheet">
  <script src="https://cdn.plot.ly/plotly-2.32.0.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
  <!-- Bootstrap JS for tooltips -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', ()=>{[...document.querySelectorAll('[data-bs-toggle="tooltip"]')]
      .forEach(el=>new bootstrap.Tooltip(el));});
  </script>
</head>
<body class="p-4">
<nav class="mb-4">
  <a class="btn btn-outline-secondary btn-sm me-2" href="/">Home</a>
  <a class="btn btn-outline-secondary btn-sm me-2" href="/approved">Approved</a>
  <a class="btn btn-outline-secondary btn-sm" href="/logs">Logs</a>
</nav>
{% block content %}{% endblock %}
</body></html>

# ──────────────────────────────────────────────────────────────────────────────
# 3.  /apps/sp_hfts/latency_portal/templates/list.html
# ──────────────────────────────────────────────────────────────────────────────
{% extends 'base.html' %}{% block title %}Latency Benchmarks{% endblock %}
{% block content %}
<h2 class="mb-3">Latency Benchmarks</h2>
<table id="runs-table" class="table table-striped table-bordered table-sm">
<thead class="table-light">
<tr>
  <th>Run</th><th>UTC</th>
  <th data-bs-toggle="tooltip" title="50th percentile (median)">P50 (ns)</th>
  <th data-bs-toggle="tooltip" title="95th percentile">P95 (ns)</th>
  <th data-bs-toggle="tooltip" title="99th percentile">P99 (ns)</th>
  <th data-bs-toggle="tooltip" title="Standard deviation">σ (ns)</th>
  <th data-bs-toggle="tooltip" title="Sample count">n</th><th>Status</th>
</tr>
</thead><tbody>
{% for r in runs %}
<tr>
  <td><a href="/runs/{{ r.id }}">{{ r.id }}</a></td>
  <td>{{ r.created_at[:19] }}</td>
  <td>{{ '%.0f'|format(r.p50) }}</td><td>{{ '%.0f'|format(r.p95) }}</td>
  <td>{{ '%.0f'|format(r.p99) }}</td><td>{{ '%.0f'|format(r.stdev) }}</td>
  <td>{{ r.count }}</td>
  <td>{% if r.approved %}<span class="badge bg-success">APPROVED</span>{% else %}
      <span class="badge bg-danger">PENDING</span>{% endif %}</td>
</tr>{% endfor %}
</tbody></table>
<script>$(function(){$('#runs-table').DataTable({order:[[1,'desc']]});});</script>
{% endblock %}

# ──────────────────────────────────────────────────────────────────────────────
# 4.  /apps/sp_hfts/latency_portal/templates/detail.html
# ──────────────────────────────────────────────────────────────────────────────
{% extends 'base.html' %}{% block title %}Run {{ id }}{% endblock %}
{% block content %}
<a class="btn btn-link mb-3" href="/">← Back</a>
<h3>Run {{ id }}</h3><p class="text-muted">{{ created_at[:19] }} UTC</p>

<div id="rawplot" style="height:350px;"></div>
<div id="quantplot" style="height:350px;" class="mt-5"></div>

<script>
Plotly.newPlot('rawplot', [{x:{{ x_json|safe }}, y:{{ y_json|safe }},
  mode:'lines', line:{width:1}}], {
  title:'Latency per message',
  margin:{l:40,r:20,t:40,b:40},
  xaxis:{title:'Ingress time', type:'date'},
  yaxis:{title:'Latency (ns)'}
});
Plotly.newPlot('quantplot', [
  {x:{{ sec_json|safe }}, y:{{ p50_json|safe }}, name:'P50', mode:'lines'},
  {x:{{ sec_json|safe }}, y:{{ p95_json|safe }}, name:'P95', mode:'lines'},
  {x:{{ sec_json|safe }}, y:{{ p99_json|safe }}, name:'P99', mode:'lines'}
], {
  title:'Per-second quantiles',
  margin:{l:40,r:20,t:40,b:40},
  xaxis:{title:'Time (1-s buckets)', type:'date'},
  yaxis:{title:'Latency (ns)'}
});
</script>

<div class="row g-3 mt-4">
  <div class="col-auto"><span class="badge bg-secondary" data-bs-toggle="tooltip"
        title="50 % of latencies are below this value (median)">P50</span>
        {{ '%.0f'|format(p50) }} ns</div>
  <div class="col-auto"><span class="badge bg-secondary" data-bs-toggle="tooltip"
        title="95th percentile latency">P95</span>
        {{ '%.0f'|format(p95) }} ns</div>
  <div class="col-auto"><span class="badge bg-secondary" data-bs-toggle="tooltip"
        title="99th percentile latency">P99</span>
        {{ '%.0f'|format(p99) }} ns</div>
  <div class="col-auto"><span class="badge bg-secondary" data-bs-toggle="tooltip"
        title="Population standard deviation">σ</span>
        {{ '%.0f'|format(stdev) }} ns</div>
  <div class="col-auto"><span class="badge bg-secondary" data-bs-toggle="tooltip"
        title="Total samples">n</span> {{ count }}</div>
</div>

{% if approved %}
  <div class="alert alert-success mt-4 d-flex justify-content-between">
    <span>Approved by <b>{{ approved_by }}</b> at {{ approved_at[:19] }} UTC</span>
    <form action="/runs/{{ id }}/unapprove" method="post">
      <button class="btn btn-outline-danger btn-sm" data-bs-toggle="tooltip"
              title="Mark this run as not approved">Un-approve</button>
    </form>
  </div>
{% else %}
  <form class="mt-4" action="/runs/{{ id }}/approve" method="post">
    <div class="input-group w-auto">
      <input class="form-control form-control-sm" name="user" placeholder="Your name">
      <button class="btn btn-success btn-sm">Approve</button>
    </div>
  </form>
{% endif %}
{% endblock %}

# ──────────────────────────────────────────────────────────────────────────────
# 5.  /apps/sp_hfts/latency_portal/start_portal.sh   (only launch line shown)
# ──────────────────────────────────────────────────────────────────────────────
nohup .venv/bin/python -m uvicorn latency_portal:app --host 0.0.0.0 --port 8080 \
      >>portal.log 2>&1 &
# ──────────────────────────────────────────────────────────────────────────────
